<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="google" value="notranslate">
    <% if (htmlWebpackPlugin.options.isCbp) { %>
      <% /* If you are forkimg, you will need to remove or replace google-site-verification,
        and if you don't use Simple Analytics you will want to remove or replace that script too. */ %>
      <meta name="google-site-verification" content="xMC75_ZeQyXE1iaRV31N-hOLPJVubcfmiKfoiOqcNH8" /> 
      <script>
      (function() {
        var lsNamespace = "<%= require('../lib/amp-localstorage-namespace.js').lsNamespace %>";
        const optedOut = localStorage.getItem(`${lsNamespace}:analytics-opted-out`) === 'true';

        if (!optedOut) {
          const script = document.createElement('script');
          script.async = true;
          script.src = 'https://scripts.simpleanalyticscdn.com/latest.js';
          document.head.appendChild(script);
        }
      })();
    </script>
    <% } else { %>  
      <meta name="robots" content="noindex, nofollow">
    <% } %>
    <meta name="description" content="<%= htmlWebpackPlugin.options.APP_NAME %> is a powerful block-based programming language built on Scratch 3.0 and TurboWarp." />
    <title><%= htmlWebpackPlugin.options.title %></title>
    <link rel="apple-touch-icon" href="<%= htmlWebpackPlugin.options.root %>images/apple-touch-icon.png">
    <% 
      /* Stolen from librekitten lol
        https://codeberg.org/LibreKitten/LibreKitten/commit/87f1b2d934aa228829ee3179fb226c411d969fba#diff-4913fa303beb5bc166ede94c92bb244f9ed68cef */
      [
        require('@fontsource-variable/inter/files/inter-latin-wght-normal.woff2'),
        require('@fontsource-variable/inter/files/inter-greek-ext-wght-normal.woff2'),
        require('@fontsource-variable/inter/files/inter-greek-wght-normal.woff2'),
        require('@fontsource-variable/inter/files/inter-cyrillic-ext-wght-normal.woff2'),
        require('@fontsource-variable/inter/files/inter-cyrillic-wght-normal.woff2'),
        require('@fontsource-variable/inter/files/inter-latin-ext-wght-normal.woff2'),
        require('@fontsource-variable/inter/files/inter-vietnamese-wght-normal.woff2')
      ].map(font => { %>
        <link 
          rel="preload"
          href="<%= font %>"
          as="font"
          type="font/woff2"
        >
    <% }); %>
    <style>
      .splash-screen {
        position: absolute;
        width: 100%;
        height: 100%;
        z-index: 999999999999999999999999;
        top: 0;
        left: 0;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        align-items: center;
        justify-content: center;
        text-align: center;
        font-family: "Inter Variable", sans-serif;
      }
      .splash-main {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        align-items: center;
        justify-content: center;
        text-align: center;
      }
      .ampmod-colour-scheme {
        background-color: white;
        color:black;
      }
      .splash-error-screen {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
        justify-content: left;
        text-align: left;
        width: 70%;
      }
      .splash-canary-title {
        font-weight: bold;
      }
      .splash-screen * img {
        vertical-align: middle;
      }
      .splash-screen[hidden], .splash-main[hidden], .splash-error-screen[hidden] {
        display: none;
      }
      .splash-screen > * {
        max-width: 80%;
      }
      .splash-screen a {
        color: inherit;
      }
      .splash-errors {
        font-family: monospace;
        padding: 12px;
        border-radius: 8px;
        font-size: 1.2em;
        background: black;
        color: white;
        max-height: 300px;
        width: 100%;
        overflow: scroll;
      }
      .splash-error-list {
        white-space: pre-wrap;
      }
      .splash-reset, .splash-delete-data, .splash-copy {
        color: inherit;
        background: none;
        padding: 0;
        margin: 0;
        border: none;
        text-decoration: underline;
        cursor: pointer;
      }
      @keyframes top-slide-in {
        0% {
          transform: translateY(50px);
          opacity: 0;
        }
        33% {
          transform: translateY(0px);
          opacity: 1;
        }
      }
      @keyframes middle-slide-in {
        0% {
          transform: translateY(50px);
          opacity: 0;
        }
        33% {
          transform: translateY(50px);
          opacity: 0;
        }
        66% {
          transform: translateY(0px);
          opacity: 1;
        }
      }
      @keyframes bottom-slide-in {
        0% {
          transform: translateY(50px);
          opacity: 0;
        }
        66% {
          transform: translateY(50px);
          opacity: 0;
        }
        100% {
          transform: translateY(0px);
          opacity: 1;
        }
      }
      .version {
        position: absolute;
        bottom: 0.5em;
        left: 0.5em;
        font-size: 1em;
        opacity: 0.5;
        padding: 20px;
      }
      .progress-bar-fake {
        width: 256px;
        height: 10px;
        background-color: #ffffff33;
        border-radius: 999px;
        overflow: hidden;
        margin-top: 1rem;
      }
      .progress-bar-fake-inner {
        width: 50%;
        height: 100%;
        background-color: white;
        animation: marquee 1.2s linear infinite;
      }
      @keyframes marquee {
        0% {
          transform: translateX(-130%);
        }
        100% {
          transform: translateX(200%);
        }
      }
      .loading-dots {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
        vertical-align: bottom;
      }
      .loading-dots a {
        width: 12px;
        height: 12px;
        background-color: currentColor;
        border-radius: 50%;
        display: inline-block;
        animation: bounce 0.8s infinite ease-in-out;
      }

      .splash-screen[data-theme="light"] img, .ampmod-colour-scheme img {
        filter: invert(100%);
      }

      .ampmod-logo {
        margin-bottom: 18px;
      }

      .reload-button {
        background: white;
        color: black;
        border: 1px black solid;
        padding: 8px 16px;
        border-radius: 8px;
        font-weight: bold;
      }

      @keyframes bounce {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-15px); }
      }

      .loading-dots a:nth-child(1) { animation-delay: 0s; }
      .loading-dots a:nth-child(2) { animation-delay: 0.2s; }
      .loading-dots a:nth-child(3) { animation-delay: 0.4s; }
    </style>
  </head>
  <body>
<noscript>
      <!-- Text here is intentionally hardcoded to English since the translation loader relies on JavaScript. -->
      <div class="splash-screen ampmod-colour-scheme">
        <div class="splash-error-screen">
          <div>
            <h1 class="splash-error-title">
              <img src="<%= require('../components/menu-bar/tw-error.svg') %>" draggable="false" loading="lazy" height="48" /> JavaScript is disabled
            </h1>
            <p>
              <%= htmlWebpackPlugin.options.APP_NAME %> requires JavaScript, but it is disabled or your browser doesn't support it. 
              A desktop version of <%= htmlWebpackPlugin.options.APP_NAME %> will be available soon if you prefer not to load remote JavaScript.
            </p>
          </div>
        </div>
      </div>
    </noscript>

    <div class="splash-screen spash-waiting-for-js" hidden>
      <div class="splash-main">
        <img src="<%= require('../components/menu-bar/tw-advanced.svg') %>" draggable="false" loading="lazy" height="80" alt="AmpMod small logo" />
        <div class="loading-dots">
          <a></a><a></a><a></a>
        </div>
        <% if (process.env.ampmod_mode === "canary") { %>
          <div class="splash-canary-title"><span data-amp-translation="canaryBuild"></span></div>
        <% } %>
        <div class="splash-taking-too-long" hidden>
          <span data-amp-translation="tooLong1"></span>
          <% if (process.env.ampmod_is_cbp) { %>
            <br /><span data-amp-translation="tooLong2"></span>
          <% } %>
        </div>
        <div class="splash-custom-info"></div>
        <div class="version">v<%= process.env.ampmod_version %></div>
      </div>
      <div class="splash-error-screen" hidden>
        <div class="version">v<%= process.env.ampmod_version %></div>
        <h1 class="splash-error-title"><img src="<%= require('../components/menu-bar/tw-error.svg') %>" draggable="false" loading="lazy" height="48" /> <span data-amp-translation="error"></span></h1>
        <div class="splash-errors"></div>
        <button onclick="window.location.reload()" class="reload-button"><span data-amp-translation="reload"></span></button>
        <p><span data-amp-translation="errorText"></span></p>
        <p><span data-amp-translation="errorTips"></span></p>
      </div>
    </div>

    <script>
      (function () {
        'use strict';

        // Load translations
        var translations = <%= JSON.stringify(require("./splash-translations").default) %>;

        // Read preferred language from localStorage
        var lsNamespace = "<%= require('../lib/amp-localstorage-namespace.js').lsNamespace %>";
        var storedLang = localStorage.getItem(lsNamespace + "language");
        var lang = storedLang;
        var t = translations[lang] || translations["en"];
        document.documentElement.lang = lang;

        // Replace placeholders like {APP_NAME}, {reloading}, etc.
        function interpolate(str) {
          return str
            .replace('{APP_NAME}', `<%= htmlWebpackPlugin.options.APP_NAME %>`)
            .replace('{reloading}', `<a href="javascript:window.location.reload()">${t.tooLong1_reloading}</a>`)
            .replace('{codebergStatus}', `<a href="https://status.codeberg.eu" target="_blank" rel="noreferrer">${t.codebergStatus}</a>`)
            .replace('{forums}', `<a href="https://ampmod.flarum.cloud/t/bugs-and-glitches">${t.errorForumsLink}</a>`)
            .replace('{issueTracker}', `<a href="https://codeberg.org/ampmod/ampmod/issues">${t.errorCbLink}</a>`)
            .replace('{copy}', `<button class="splash-copy">${t.errorCopy}</button>`)
            .replace('{nocache}', `<button class="splash-reset">${t.nocache}</button>`)
            .replace('{eraseData}', `<button class="splash-delete-data">${t.eraseData}</button>`);
        }

        // Inject translations into all elements with data-amp-translation
        document.querySelectorAll('[data-amp-translation]').forEach(function(el) {
          var key = el.getAttribute('data-amp-translation');
          el.innerHTML = interpolate(t[key]);
        });

        var theme = '';
        var canary = <%= process.env.ampmod_mode === "canary" %>;
        var accent = canary ? '#FF4C4C' : '#59C059';

        const showTooLongMessage = setTimeout(function () {
          var splashErrorScreen = document.querySelector('.splash-error-screen');
          if (!splashErrorScreen.hidden) return; // already errored
          var takingTooLong = document.querySelector('.splash-taking-too-long');
          takingTooLong.hidden = false;
        }, 20000);

        var lsNamespace = "<%= require('../lib/amp-localstorage-namespace.js').lsNamespace %>";

        var themeSetting = localStorage.getItem(`${lsNamespace}theme`);

        try {
          var parsed = JSON.parse(themeSetting);
          theme = parsed.gui;
          if (parsed.accent === 'purple') {
            accent = '#855cd6';
          } else if (parsed.accent === 'blue') {
            accent = '#4c97ff';
          } else if (parsed.accent === 'green') {
            accent = '#59c059';
          } else if (parsed.accent === 'grey') {
            accent = '#333';
          } else if (parsed.accent === 'red' || parsed.accent === 'rainbow') {
            accent = '#FF4C4C';
          }
        } catch (e) {
          // ignore
        }

        if (!theme) {
          theme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }

        var splash = document.querySelector('.spash-waiting-for-js');
        splash.setAttribute('data-theme', theme);
        if (theme === 'light') {
          splash.style.backgroundColor = 'white';
          splash.style.color = "black";
        } else {
          splash.style.backgroundColor = accent;
          splash.style.color = 'white';
        }
        splash.hidden = false;

        var splashErrorTitle = document.querySelector('.splash-error-title');
        var splashCustomInfo = document.querySelector('.splash-custom-info');
        var splashMain = document.querySelector('.splash-main');
        var splashErrorScreen = document.querySelector('.splash-error-screen');
        var splashError = document.querySelector('.splash-errors');
        var splashReset = document.querySelector('.splash-reset');
        var splashDeleteData = document.querySelector('.splash-delete-data');
        var splashCopy = document.querySelector('.splash-copy');
      
        var totalErrors = 0;
        window.onerror = function (event, source, line, col, err) {
          var el = document.createElement('div');
          el.textContent = "INFO FOR REPORTING: Version <%= process.env.ampmod_version %> with <%= process.env.ampmod_mode || 'default' %> mode.";
          if (totalErrors === 0) splashError.appendChild(el);
          if (++totalErrors > 5) return; // dont bother logging more
          splashMain.hidden = true;
          splashErrorScreen.hidden = false;
          var el = document.createElement('div');
          el.textContent = 'Error (splash) in ' + source + ' (' + line + ':' + col + '): ' + err;
          splashError.appendChild(el);
        };

        splashReset.onclick = function () {
          splashReset.disabled = true;
          function hardRefresh() {
            var search = location.search.replace(/[?&]nocache=\d+/, '');
            location.replace(location.pathname + search + (search ? '&' : '?') + 'nocache=' + Math.floor(Math.random() * 100000));
          }
          if ('serviceWorker' in navigator) {
            setTimeout(hardRefresh, 5000);
            navigator.serviceWorker.getRegistration(<%= JSON.stringify(htmlWebpackPlugin.options.root) %>)
              .then(function(registration) {
                if (registration) {
                  return registration.unregister();
                }
              })
              .then(hardRefresh)
              .catch(hardRefresh);
          } else {
            hardRefresh();
          }
        };
        splashDeleteData.onclick = function () {
            try {
            if (!confirm('Your backpack and restore points will be deleted. Continue?')) {
              return;
            }
            <% if (process.env.ampmod_mode === "canary") { %>
                  const storagePrefix = 'canary:';
                  const databasePrefix = 'Canary';
            <% } else { %>
                  const storagePrefix = 'tw:';
                  const databasePrefix = 'TW_';
            <% } %>
            window.localStorage.removeItem(storagePrefix + "theme");
            window.indexedDB.deleteDatabase(databasePrefix + "RestorePoints");
            window.indexedDB.deleteDatabase(databasePrefix + "Backpack");
            window.localStorage.removeItem(storagePrefix + "username");
            window.localStorage.removeItem(storagePrefix + "language");
            location.reload();
          } catch (e) {
            // ignore
          }
        };

        splashCopy.onclick = function () {
          try {
            navigator.clipboard.writeText(splashError.textContent);
            splashCopy.textContent = t.errorDidCopy;
            setTimeout(function () {
              splashCopy.textContent = t.errorCopy;
            }, 2000);
          } catch (e) {
            splashCopy.textContent = t.errorCopyFailed;
            setTimeout(function () {
              splashCopy.textContent = t.errorCopy;
            }, 2000);
          }
        };

        window.SplashEnd = () => {
          clearTimeout(showTooLongMessage);
          window.onerror = null;

          splash.parentNode.removeChild(splash);
        };

        window.SetCustomSplashInfo = (text) => {
          splashCustomInfo.innerHTML = text;
        }
      })();
    </script>

    <div id="app"></div>
  </body>
</html>
