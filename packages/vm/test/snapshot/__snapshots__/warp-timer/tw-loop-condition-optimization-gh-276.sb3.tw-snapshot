// TW Snapshot
// Input SHA-256: 3c81a01417b9a927457132a5f89b63e54b2499714376246739535b51dbce2d45

// Sprite1 script
(function factoryXYZ(thread) { const target = thread.target; const runtime = target.runtime; const stage = runtime.getTargetForStage();
const b0 = runtime.getOpcodeFunction("looks_say");
const b1 = stage.variables["`jEk@4|i[#Fk?(8x)AV.-my variable"];
return function* genXYZ () {
yield* executeInCompatibilityLayer({"MESSAGE":"plan 1",}, b0, false, false, "g", null);
yield* thread.procedures["Wtest %s"]("random");
if ((("" + b1.value).toLowerCase() === "random".toLowerCase())) {
yield* executeInCompatibilityLayer({"MESSAGE":"pass",}, b0, false, false, "p", null);
}
yield* executeInCompatibilityLayer({"MESSAGE":"end",}, b0, false, false, "n", null);
retire(); return;
}; })

// Sprite1 Wtest %s
(function factoryXYZ(thread) { const target = thread.target; const runtime = target.runtime; const stage = runtime.getTargetForStage();
const b0 = stage.variables["`jEk@4|i[#Fk?(8x)AV.-my variable"];
const b1 = stage.variables["t)]?yi[*8XU73qhMqOa8"];
return function* genXYZ_test_ (p0) {
b0.value = p0;
while (!(("" + listGet(b1.value, b0.value)).toLowerCase() === "something".toLowerCase())) {
b0.value = ((+b0.value || 0) + 1);
if (isStuck()) yield;
}
return "";
}; })
