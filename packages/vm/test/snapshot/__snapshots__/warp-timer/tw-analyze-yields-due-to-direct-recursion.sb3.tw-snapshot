// TW Snapshot
// Input SHA-256: 848a4efc16b174b53f0a4b581e6b6d1091ae9eaa916e040c963e360ce3883509

// Sprite1 script
(function factoryXYZ(thread) { const target = thread.target; const runtime = target.runtime; const stage = runtime.getTargetForStage();
const b0 = runtime.getOpcodeFunction("looks_say");
const b1 = stage.variables["`jEk@4|i[#Fk?(8x)AV.-my variable"];
const b2 = stage.variables["FpLI$ida6)qR,q~y`1|*"];
return function* genXYZ () {
yield* executeInCompatibilityLayer({"MESSAGE":"plan 1",}, b0, false, false, "j", null);
b1.value = (1 + 2);
yield* thread.procedures["Znon-warp recursion %s"](2);
if ((("" + listGet(b2.value, b1.value)).toLowerCase() === "the only thing".toLowerCase())) {
yield* executeInCompatibilityLayer({"MESSAGE":"pass",}, b0, false, false, "t", null);
}
yield* executeInCompatibilityLayer({"MESSAGE":"end",}, b0, false, false, "s", null);
retire(); return;
}; })

// Sprite1 Znon-warp recursion %s
(function factoryXYZ(thread) { const target = thread.target; const runtime = target.runtime; const stage = runtime.getTargetForStage();
return function* genXYZ_non_warp_recursion_ (p0) {
if (compareGreaterThan(p0, 0)) {
yield;
yield* thread.procedures["Znon-warp recursion %s"](((+p0 || 0) - 1));
}
return "";
}; })

// Sprite1 script
(function factoryXYZ(thread) { const target = thread.target; const runtime = target.runtime; const stage = runtime.getTargetForStage();
const b0 = stage.variables["`jEk@4|i[#Fk?(8x)AV.-my variable"];
return function* genXYZ () {
for (var a0 = 1; a0 > 0; a0--) {
yield;
}
b0.value = "random";
retire(); return;
}; })
